// File generated by ANTLR. DO NOT EDIT.

package pathpolicyconstraints // PathPolicyConstraints
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 21, 88, 4,
	2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4,
	8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 37, 10,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 46, 10, 4, 3, 4, 3,
	4, 3, 4, 7, 4, 51, 10, 4, 12, 4, 14, 4, 54, 11, 4, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 5, 6, 67, 10, 6, 3, 7, 3,
	7, 3, 7, 5, 7, 72, 10, 7, 3, 8, 3, 8, 5, 8, 76, 10, 8, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 5, 9, 84, 10, 9, 3, 10, 3, 10, 3, 10, 2, 3, 6, 11, 2,
	4, 6, 8, 10, 12, 14, 16, 18, 2, 2, 2, 89, 2, 20, 3, 2, 2, 2, 4, 36, 3,
	2, 2, 2, 6, 45, 3, 2, 2, 2, 8, 55, 3, 2, 2, 2, 10, 66, 3, 2, 2, 2, 12,
	71, 3, 2, 2, 2, 14, 75, 3, 2, 2, 2, 16, 83, 3, 2, 2, 2, 18, 85, 3, 2, 2,
	2, 20, 21, 5, 6, 4, 2, 21, 3, 3, 2, 2, 2, 22, 23, 7, 16, 2, 2, 23, 24,
	5, 6, 4, 2, 24, 25, 7, 11, 2, 2, 25, 26, 5, 6, 4, 2, 26, 27, 7, 12, 2,
	2, 27, 28, 5, 6, 4, 2, 28, 29, 7, 17, 2, 2, 29, 37, 3, 2, 2, 2, 30, 31,
	7, 16, 2, 2, 31, 32, 5, 6, 4, 2, 32, 33, 7, 11, 2, 2, 33, 34, 5, 6, 4,
	2, 34, 35, 7, 17, 2, 2, 35, 37, 3, 2, 2, 2, 36, 22, 3, 2, 2, 2, 36, 30,
	3, 2, 2, 2, 37, 5, 3, 2, 2, 2, 38, 39, 8, 4, 1, 2, 39, 40, 7, 14, 2, 2,
	40, 41, 5, 6, 4, 2, 41, 42, 7, 15, 2, 2, 42, 46, 3, 2, 2, 2, 43, 46, 5,
	8, 5, 2, 44, 46, 5, 4, 3, 2, 45, 38, 3, 2, 2, 2, 45, 43, 3, 2, 2, 2, 45,
	44, 3, 2, 2, 2, 46, 52, 3, 2, 2, 2, 47, 48, 12, 5, 2, 2, 48, 49, 7, 13,
	2, 2, 49, 51, 5, 6, 4, 6, 50, 47, 3, 2, 2, 2, 51, 54, 3, 2, 2, 2, 52, 50,
	3, 2, 2, 2, 52, 53, 3, 2, 2, 2, 53, 7, 3, 2, 2, 2, 54, 52, 3, 2, 2, 2,
	55, 56, 5, 10, 6, 2, 56, 57, 5, 12, 7, 2, 57, 58, 7, 10, 2, 2, 58, 59,
	5, 14, 8, 2, 59, 60, 7, 3, 2, 2, 60, 61, 5, 14, 8, 2, 61, 62, 7, 18, 2,
	2, 62, 63, 5, 16, 9, 2, 63, 9, 3, 2, 2, 2, 64, 67, 7, 5, 2, 2, 65, 67,
	7, 6, 2, 2, 66, 64, 3, 2, 2, 2, 66, 65, 3, 2, 2, 2, 67, 11, 3, 2, 2, 2,
	68, 72, 7, 7, 2, 2, 69, 72, 7, 8, 2, 2, 70, 72, 7, 9, 2, 2, 71, 68, 3,
	2, 2, 2, 71, 69, 3, 2, 2, 2, 71, 70, 3, 2, 2, 2, 72, 13, 3, 2, 2, 2, 73,
	76, 7, 5, 2, 2, 74, 76, 7, 6, 2, 2, 75, 73, 3, 2, 2, 2, 75, 74, 3, 2, 2,
	2, 76, 15, 3, 2, 2, 2, 77, 78, 7, 19, 2, 2, 78, 84, 5, 18, 10, 2, 79, 80,
	7, 20, 2, 2, 80, 84, 5, 18, 10, 2, 81, 84, 7, 5, 2, 2, 82, 84, 7, 21, 2,
	2, 83, 77, 3, 2, 2, 2, 83, 79, 3, 2, 2, 2, 83, 81, 3, 2, 2, 2, 83, 82,
	3, 2, 2, 2, 84, 17, 3, 2, 2, 2, 85, 86, 7, 6, 2, 2, 86, 19, 3, 2, 2, 2,
	9, 36, 45, 52, 66, 71, 75, 83,
}
var literalNames = []string{
	"", "','", "", "'0'", "", "", "", "", "'#'", "'?'", "':'", "'+'", "'('",
	"')'", "'{'", "'}'", "'@'", "'G'", "'L'", "'REJECT'",
}
var symbolicNames = []string{
	"", "", "WHITESPACE", "ZERO", "NUM", "WILDCARDAS", "LEGACYAS", "AS", "HASH",
	"QUESTIONMARK", "ELSE", "PLUS", "LPAR", "RPAR", "LBRACE", "RBRACE", "MONKEYTAIL",
	"GLOBALPOLICY", "LOCALPOLICY", "REJECT",
}

var ruleNames = []string{
	"start", "query", "expression", "identifier", "isd", "as", "iface", "onepolicy",
	"policyindex",
}

type PathPolicyConstraintsParser struct {
	*antlr.BaseParser
}

// NewPathPolicyConstraintsParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *PathPolicyConstraintsParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewPathPolicyConstraintsParser(input antlr.TokenStream) *PathPolicyConstraintsParser {
	this := new(PathPolicyConstraintsParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "PathPolicyConstraints.g4"

	return this
}

// PathPolicyConstraintsParser tokens.
const (
	PathPolicyConstraintsParserEOF          = antlr.TokenEOF
	PathPolicyConstraintsParserT__0         = 1
	PathPolicyConstraintsParserWHITESPACE   = 2
	PathPolicyConstraintsParserZERO         = 3
	PathPolicyConstraintsParserNUM          = 4
	PathPolicyConstraintsParserWILDCARDAS   = 5
	PathPolicyConstraintsParserLEGACYAS     = 6
	PathPolicyConstraintsParserAS           = 7
	PathPolicyConstraintsParserHASH         = 8
	PathPolicyConstraintsParserQUESTIONMARK = 9
	PathPolicyConstraintsParserELSE         = 10
	PathPolicyConstraintsParserPLUS         = 11
	PathPolicyConstraintsParserLPAR         = 12
	PathPolicyConstraintsParserRPAR         = 13
	PathPolicyConstraintsParserLBRACE       = 14
	PathPolicyConstraintsParserRBRACE       = 15
	PathPolicyConstraintsParserMONKEYTAIL   = 16
	PathPolicyConstraintsParserGLOBALPOLICY = 17
	PathPolicyConstraintsParserLOCALPOLICY  = 18
	PathPolicyConstraintsParserREJECT       = 19
)

// PathPolicyConstraintsParser rules.
const (
	PathPolicyConstraintsParserRULE_start       = 0
	PathPolicyConstraintsParserRULE_query       = 1
	PathPolicyConstraintsParserRULE_expression  = 2
	PathPolicyConstraintsParserRULE_identifier  = 3
	PathPolicyConstraintsParserRULE_isd         = 4
	PathPolicyConstraintsParserRULE_as          = 5
	PathPolicyConstraintsParserRULE_iface       = 6
	PathPolicyConstraintsParserRULE_onepolicy   = 7
	PathPolicyConstraintsParserRULE_policyindex = 8
)

// IStartContext is an interface to support dynamic dispatch.
type IStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStartContext differentiates from other interfaces.
	IsStartContext()
}

type StartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStartContext() *StartContext {
	var p = new(StartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_start
	return p
}

func (*StartContext) IsStartContext() {}

func NewStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StartContext {
	var p = new(StartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_start

	return p
}

func (s *StartContext) GetParser() antlr.Parser { return s.parser }

func (s *StartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterStart(s)
	}
}

func (s *StartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitStart(s)
	}
}

func (p *PathPolicyConstraintsParser) Start() (localctx IStartContext) {
	this := p
	_ = this

	localctx = NewStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, PathPolicyConstraintsParserRULE_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(18)
		p.expression(0)
	}

	return localctx
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_query
	return p
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) CopyFrom(ctx *QueryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IfElseContext struct {
	*QueryContext
}

func NewIfElseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfElseContext {
	var p = new(IfElseContext)

	p.QueryContext = NewEmptyQueryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryContext))

	return p
}

func (s *IfElseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfElseContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserLBRACE, 0)
}

func (s *IfElseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IfElseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfElseContext) QUESTIONMARK() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserQUESTIONMARK, 0)
}

func (s *IfElseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserELSE, 0)
}

func (s *IfElseContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserRBRACE, 0)
}

func (s *IfElseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterIfElse(s)
	}
}

func (s *IfElseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitIfElse(s)
	}
}

type IfContext struct {
	*QueryContext
}

func NewIfContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IfContext {
	var p = new(IfContext)

	p.QueryContext = NewEmptyQueryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryContext))

	return p
}

func (s *IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserLBRACE, 0)
}

func (s *IfContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IfContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfContext) QUESTIONMARK() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserQUESTIONMARK, 0)
}

func (s *IfContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserRBRACE, 0)
}

func (s *IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterIf(s)
	}
}

func (s *IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitIf(s)
	}
}

func (p *PathPolicyConstraintsParser) Query() (localctx IQueryContext) {
	this := p
	_ = this

	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, PathPolicyConstraintsParserRULE_query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(34)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
	case 1:
		localctx = NewIfElseContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(20)
			p.Match(PathPolicyConstraintsParserLBRACE)
		}
		{
			p.SetState(21)
			p.expression(0)
		}
		{
			p.SetState(22)
			p.Match(PathPolicyConstraintsParserQUESTIONMARK)
		}
		{
			p.SetState(23)
			p.expression(0)
		}
		{
			p.SetState(24)
			p.Match(PathPolicyConstraintsParserELSE)
		}
		{
			p.SetState(25)
			p.expression(0)
		}
		{
			p.SetState(26)
			p.Match(PathPolicyConstraintsParserRBRACE)
		}

	case 2:
		localctx = NewIfContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(28)
			p.Match(PathPolicyConstraintsParserLBRACE)
		}
		{
			p.SetState(29)
			p.expression(0)
		}
		{
			p.SetState(30)
			p.Match(PathPolicyConstraintsParserQUESTIONMARK)
		}
		{
			p.SetState(31)
			p.expression(0)
		}
		{
			p.SetState(32)
			p.Match(PathPolicyConstraintsParserRBRACE)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ParensContext struct {
	*ExpressionContext
}

func NewParensContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParensContext {
	var p = new(ParensContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ParensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParensContext) LPAR() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserLPAR, 0)
}

func (s *ParensContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParensContext) RPAR() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserRPAR, 0)
}

func (s *ParensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterParens(s)
	}
}

func (s *ParensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitParens(s)
	}
}

type ExpressionIdentifierContext struct {
	*ExpressionContext
}

func NewExpressionIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionIdentifierContext {
	var p = new(ExpressionIdentifierContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterExpressionIdentifier(s)
	}
}

func (s *ExpressionIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitExpressionIdentifier(s)
	}
}

type ExpressionConcatContext struct {
	*ExpressionContext
	left  IExpressionContext
	right IExpressionContext
}

func NewExpressionConcatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionConcatContext {
	var p = new(ExpressionConcatContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionConcatContext) GetLeft() IExpressionContext { return s.left }

func (s *ExpressionConcatContext) GetRight() IExpressionContext { return s.right }

func (s *ExpressionConcatContext) SetLeft(v IExpressionContext) { s.left = v }

func (s *ExpressionConcatContext) SetRight(v IExpressionContext) { s.right = v }

func (s *ExpressionConcatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionConcatContext) PLUS() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserPLUS, 0)
}

func (s *ExpressionConcatContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionConcatContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionConcatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterExpressionConcat(s)
	}
}

func (s *ExpressionConcatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitExpressionConcat(s)
	}
}

type ExpressionQueryContext struct {
	*ExpressionContext
}

func NewExpressionQueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionQueryContext {
	var p = new(ExpressionQueryContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpressionQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionQueryContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *ExpressionQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterExpressionQuery(s)
	}
}

func (s *ExpressionQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitExpressionQuery(s)
	}
}

func (p *PathPolicyConstraintsParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *PathPolicyConstraintsParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 4
	p.EnterRecursionRule(localctx, 4, PathPolicyConstraintsParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(43)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PathPolicyConstraintsParserLPAR:
		localctx = NewParensContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(37)
			p.Match(PathPolicyConstraintsParserLPAR)
		}
		{
			p.SetState(38)
			p.expression(0)
		}
		{
			p.SetState(39)
			p.Match(PathPolicyConstraintsParserRPAR)
		}

	case PathPolicyConstraintsParserZERO, PathPolicyConstraintsParserNUM:
		localctx = NewExpressionIdentifierContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(41)
			p.Identifier()
		}

	case PathPolicyConstraintsParserLBRACE:
		localctx = NewExpressionQueryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(42)
			p.Query()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(50)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionConcatContext(p, NewExpressionContext(p, _parentctx, _parentState))
			localctx.(*ExpressionConcatContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, PathPolicyConstraintsParserRULE_expression)
			p.SetState(45)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(46)
				p.Match(PathPolicyConstraintsParserPLUS)
			}
			{
				p.SetState(47)

				var _x = p.expression(4)

				localctx.(*ExpressionConcatContext).right = _x
			}

		}
		p.SetState(52)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext())
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Isd() IIsdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIsdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIsdContext)
}

func (s *IdentifierContext) As() IAsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsContext)
}

func (s *IdentifierContext) HASH() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserHASH, 0)
}

func (s *IdentifierContext) AllIface() []IIfaceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIfaceContext)(nil)).Elem())
	var tst = make([]IIfaceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIfaceContext)
		}
	}

	return tst
}

func (s *IdentifierContext) Iface(i int) IIfaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfaceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIfaceContext)
}

func (s *IdentifierContext) MONKEYTAIL() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserMONKEYTAIL, 0)
}

func (s *IdentifierContext) Onepolicy() IOnepolicyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOnepolicyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOnepolicyContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *PathPolicyConstraintsParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, PathPolicyConstraintsParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(53)
		p.Isd()
	}
	{
		p.SetState(54)
		p.As()
	}
	{
		p.SetState(55)
		p.Match(PathPolicyConstraintsParserHASH)
	}
	{
		p.SetState(56)
		p.Iface()
	}
	{
		p.SetState(57)
		p.Match(PathPolicyConstraintsParserT__0)
	}
	{
		p.SetState(58)
		p.Iface()
	}
	{
		p.SetState(59)
		p.Match(PathPolicyConstraintsParserMONKEYTAIL)
	}
	{
		p.SetState(60)
		p.Onepolicy()
	}

	return localctx
}

// IIsdContext is an interface to support dynamic dispatch.
type IIsdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIsdContext differentiates from other interfaces.
	IsIsdContext()
}

type IsdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIsdContext() *IsdContext {
	var p = new(IsdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_isd
	return p
}

func (*IsdContext) IsIsdContext() {}

func NewIsdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IsdContext {
	var p = new(IsdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_isd

	return p
}

func (s *IsdContext) GetParser() antlr.Parser { return s.parser }

func (s *IsdContext) CopyFrom(ctx *IsdContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IsdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type WildcardISDContext struct {
	*IsdContext
}

func NewWildcardISDContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildcardISDContext {
	var p = new(WildcardISDContext)

	p.IsdContext = NewEmptyIsdContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IsdContext))

	return p
}

func (s *WildcardISDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardISDContext) ZERO() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserZERO, 0)
}

func (s *WildcardISDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterWildcardISD(s)
	}
}

func (s *WildcardISDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitWildcardISD(s)
	}
}

type ISDContext struct {
	*IsdContext
}

func NewISDContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ISDContext {
	var p = new(ISDContext)

	p.IsdContext = NewEmptyIsdContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IsdContext))

	return p
}

func (s *ISDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ISDContext) NUM() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserNUM, 0)
}

func (s *ISDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterISD(s)
	}
}

func (s *ISDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitISD(s)
	}
}

func (p *PathPolicyConstraintsParser) Isd() (localctx IIsdContext) {
	this := p
	_ = this

	localctx = NewIsdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, PathPolicyConstraintsParserRULE_isd)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(64)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PathPolicyConstraintsParserZERO:
		localctx = NewWildcardISDContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(62)
			p.Match(PathPolicyConstraintsParserZERO)
		}

	case PathPolicyConstraintsParserNUM:
		localctx = NewISDContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(63)
			p.Match(PathPolicyConstraintsParserNUM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAsContext is an interface to support dynamic dispatch.
type IAsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsContext differentiates from other interfaces.
	IsAsContext()
}

type AsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsContext() *AsContext {
	var p = new(AsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_as
	return p
}

func (*AsContext) IsAsContext() {}

func NewAsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsContext {
	var p = new(AsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_as

	return p
}

func (s *AsContext) GetParser() antlr.Parser { return s.parser }

func (s *AsContext) CopyFrom(ctx *AsContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *AsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ASContext struct {
	*AsContext
}

func NewASContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ASContext {
	var p = new(ASContext)

	p.AsContext = NewEmptyAsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AsContext))

	return p
}

func (s *ASContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ASContext) AS() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserAS, 0)
}

func (s *ASContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterAS(s)
	}
}

func (s *ASContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitAS(s)
	}
}

type LegacyASContext struct {
	*AsContext
}

func NewLegacyASContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LegacyASContext {
	var p = new(LegacyASContext)

	p.AsContext = NewEmptyAsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AsContext))

	return p
}

func (s *LegacyASContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LegacyASContext) LEGACYAS() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserLEGACYAS, 0)
}

func (s *LegacyASContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterLegacyAS(s)
	}
}

func (s *LegacyASContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitLegacyAS(s)
	}
}

type WildcardASContext struct {
	*AsContext
}

func NewWildcardASContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildcardASContext {
	var p = new(WildcardASContext)

	p.AsContext = NewEmptyAsContext()
	p.parser = parser
	p.CopyFrom(ctx.(*AsContext))

	return p
}

func (s *WildcardASContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardASContext) WILDCARDAS() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserWILDCARDAS, 0)
}

func (s *WildcardASContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterWildcardAS(s)
	}
}

func (s *WildcardASContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitWildcardAS(s)
	}
}

func (p *PathPolicyConstraintsParser) As() (localctx IAsContext) {
	this := p
	_ = this

	localctx = NewAsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, PathPolicyConstraintsParserRULE_as)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(69)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PathPolicyConstraintsParserWILDCARDAS:
		localctx = NewWildcardASContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(66)
			p.Match(PathPolicyConstraintsParserWILDCARDAS)
		}

	case PathPolicyConstraintsParserLEGACYAS:
		localctx = NewLegacyASContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(67)
			p.Match(PathPolicyConstraintsParserLEGACYAS)
		}

	case PathPolicyConstraintsParserAS:
		localctx = NewASContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(68)
			p.Match(PathPolicyConstraintsParserAS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIfaceContext is an interface to support dynamic dispatch.
type IIfaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfaceContext differentiates from other interfaces.
	IsIfaceContext()
}

type IfaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfaceContext() *IfaceContext {
	var p = new(IfaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_iface
	return p
}

func (*IfaceContext) IsIfaceContext() {}

func NewIfaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfaceContext {
	var p = new(IfaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_iface

	return p
}

func (s *IfaceContext) GetParser() antlr.Parser { return s.parser }

func (s *IfaceContext) CopyFrom(ctx *IfaceContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IfaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IFaceContext struct {
	*IfaceContext
}

func NewIFaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IFaceContext {
	var p = new(IFaceContext)

	p.IfaceContext = NewEmptyIfaceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IfaceContext))

	return p
}

func (s *IFaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IFaceContext) NUM() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserNUM, 0)
}

func (s *IFaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterIFace(s)
	}
}

func (s *IFaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitIFace(s)
	}
}

type WildcardIFaceContext struct {
	*IfaceContext
}

func NewWildcardIFaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildcardIFaceContext {
	var p = new(WildcardIFaceContext)

	p.IfaceContext = NewEmptyIfaceContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IfaceContext))

	return p
}

func (s *WildcardIFaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardIFaceContext) ZERO() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserZERO, 0)
}

func (s *WildcardIFaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterWildcardIFace(s)
	}
}

func (s *WildcardIFaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitWildcardIFace(s)
	}
}

func (p *PathPolicyConstraintsParser) Iface() (localctx IIfaceContext) {
	this := p
	_ = this

	localctx = NewIfaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, PathPolicyConstraintsParserRULE_iface)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(73)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PathPolicyConstraintsParserZERO:
		localctx = NewWildcardIFaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(71)
			p.Match(PathPolicyConstraintsParserZERO)
		}

	case PathPolicyConstraintsParserNUM:
		localctx = NewIFaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(72)
			p.Match(PathPolicyConstraintsParserNUM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOnepolicyContext is an interface to support dynamic dispatch.
type IOnepolicyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOnepolicyContext differentiates from other interfaces.
	IsOnepolicyContext()
}

type OnepolicyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOnepolicyContext() *OnepolicyContext {
	var p = new(OnepolicyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_onepolicy
	return p
}

func (*OnepolicyContext) IsOnepolicyContext() {}

func NewOnepolicyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OnepolicyContext {
	var p = new(OnepolicyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_onepolicy

	return p
}

func (s *OnepolicyContext) GetParser() antlr.Parser { return s.parser }

func (s *OnepolicyContext) CopyFrom(ctx *OnepolicyContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *OnepolicyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OnepolicyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RejectContext struct {
	*OnepolicyContext
}

func NewRejectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RejectContext {
	var p = new(RejectContext)

	p.OnepolicyContext = NewEmptyOnepolicyContext()
	p.parser = parser
	p.CopyFrom(ctx.(*OnepolicyContext))

	return p
}

func (s *RejectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RejectContext) REJECT() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserREJECT, 0)
}

func (s *RejectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterReject(s)
	}
}

func (s *RejectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitReject(s)
	}
}

type LocalPolicyContext struct {
	*OnepolicyContext
}

func NewLocalPolicyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LocalPolicyContext {
	var p = new(LocalPolicyContext)

	p.OnepolicyContext = NewEmptyOnepolicyContext()
	p.parser = parser
	p.CopyFrom(ctx.(*OnepolicyContext))

	return p
}

func (s *LocalPolicyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LocalPolicyContext) LOCALPOLICY() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserLOCALPOLICY, 0)
}

func (s *LocalPolicyContext) Policyindex() IPolicyindexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPolicyindexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPolicyindexContext)
}

func (s *LocalPolicyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterLocalPolicy(s)
	}
}

func (s *LocalPolicyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitLocalPolicy(s)
	}
}

type GlobalPolicyContext struct {
	*OnepolicyContext
}

func NewGlobalPolicyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GlobalPolicyContext {
	var p = new(GlobalPolicyContext)

	p.OnepolicyContext = NewEmptyOnepolicyContext()
	p.parser = parser
	p.CopyFrom(ctx.(*OnepolicyContext))

	return p
}

func (s *GlobalPolicyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GlobalPolicyContext) GLOBALPOLICY() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserGLOBALPOLICY, 0)
}

func (s *GlobalPolicyContext) Policyindex() IPolicyindexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPolicyindexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPolicyindexContext)
}

func (s *GlobalPolicyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterGlobalPolicy(s)
	}
}

func (s *GlobalPolicyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitGlobalPolicy(s)
	}
}

type WildcardPolicyContext struct {
	*OnepolicyContext
}

func NewWildcardPolicyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WildcardPolicyContext {
	var p = new(WildcardPolicyContext)

	p.OnepolicyContext = NewEmptyOnepolicyContext()
	p.parser = parser
	p.CopyFrom(ctx.(*OnepolicyContext))

	return p
}

func (s *WildcardPolicyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardPolicyContext) ZERO() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserZERO, 0)
}

func (s *WildcardPolicyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterWildcardPolicy(s)
	}
}

func (s *WildcardPolicyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitWildcardPolicy(s)
	}
}

func (p *PathPolicyConstraintsParser) Onepolicy() (localctx IOnepolicyContext) {
	this := p
	_ = this

	localctx = NewOnepolicyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, PathPolicyConstraintsParserRULE_onepolicy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(81)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case PathPolicyConstraintsParserGLOBALPOLICY:
		localctx = NewGlobalPolicyContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(75)
			p.Match(PathPolicyConstraintsParserGLOBALPOLICY)
		}
		{
			p.SetState(76)
			p.Policyindex()
		}

	case PathPolicyConstraintsParserLOCALPOLICY:
		localctx = NewLocalPolicyContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(77)
			p.Match(PathPolicyConstraintsParserLOCALPOLICY)
		}
		{
			p.SetState(78)
			p.Policyindex()
		}

	case PathPolicyConstraintsParserZERO:
		localctx = NewWildcardPolicyContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(79)
			p.Match(PathPolicyConstraintsParserZERO)
		}

	case PathPolicyConstraintsParserREJECT:
		localctx = NewRejectContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(80)
			p.Match(PathPolicyConstraintsParserREJECT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPolicyindexContext is an interface to support dynamic dispatch.
type IPolicyindexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPolicyindexContext differentiates from other interfaces.
	IsPolicyindexContext()
}

type PolicyindexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPolicyindexContext() *PolicyindexContext {
	var p = new(PolicyindexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = PathPolicyConstraintsParserRULE_policyindex
	return p
}

func (*PolicyindexContext) IsPolicyindexContext() {}

func NewPolicyindexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PolicyindexContext {
	var p = new(PolicyindexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = PathPolicyConstraintsParserRULE_policyindex

	return p
}

func (s *PolicyindexContext) GetParser() antlr.Parser { return s.parser }

func (s *PolicyindexContext) CopyFrom(ctx *PolicyindexContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PolicyindexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PolicyindexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PolicyIndexContext struct {
	*PolicyindexContext
}

func NewPolicyIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PolicyIndexContext {
	var p = new(PolicyIndexContext)

	p.PolicyindexContext = NewEmptyPolicyindexContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PolicyindexContext))

	return p
}

func (s *PolicyIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PolicyIndexContext) NUM() antlr.TerminalNode {
	return s.GetToken(PathPolicyConstraintsParserNUM, 0)
}

func (s *PolicyIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.EnterPolicyIndex(s)
	}
}

func (s *PolicyIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(PathPolicyConstraintsListener); ok {
		listenerT.ExitPolicyIndex(s)
	}
}

func (p *PathPolicyConstraintsParser) Policyindex() (localctx IPolicyindexContext) {
	this := p
	_ = this

	localctx = NewPolicyindexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, PathPolicyConstraintsParserRULE_policyindex)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	localctx = NewPolicyIndexContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(83)
		p.Match(PathPolicyConstraintsParserNUM)
	}

	return localctx
}

func (p *PathPolicyConstraintsParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 2:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *PathPolicyConstraintsParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
