// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/fabrid/grpc (interfaces: PolicyFetcher)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/pkg/addr"
	experimental "github.com/scionproto/scion/pkg/proto/control_plane/experimental"
)

// MockPolicyFetcher is a mock of PolicyFetcher interface.
type MockPolicyFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyFetcherMockRecorder
}

// MockPolicyFetcherMockRecorder is the mock recorder for MockPolicyFetcher.
type MockPolicyFetcherMockRecorder struct {
	mock *MockPolicyFetcher
}

// NewMockPolicyFetcher creates a new mock instance.
func NewMockPolicyFetcher(ctrl *gomock.Controller) *MockPolicyFetcher {
	mock := &MockPolicyFetcher{ctrl: ctrl}
	mock.recorder = &MockPolicyFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyFetcher) EXPECT() *MockPolicyFetcherMockRecorder {
	return m.recorder
}

// GetRemotePolicy mocks base method.
func (m *MockPolicyFetcher) GetRemotePolicy(arg0 context.Context, arg1 addr.IA,
	arg2 uint32) (*experimental.RemotePolicyDescriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemotePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*experimental.RemotePolicyDescriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemotePolicy indicates an expected call of GetRemotePolicy.
func (mr *MockPolicyFetcherMockRecorder) GetRemotePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemotePolicy", reflect.TypeOf((*MockPolicyFetcher)(nil).GetRemotePolicy), arg0, arg1, arg2)
}
